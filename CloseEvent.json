{
  "name": "CloseEvent",
  "description": "",
  "members": [
    {
      "name": "CloseEvent()",
      "link": "/en-US/docs/Web/API/CloseEvent/CloseEvent",
      "description": "Creates a new CloseEvent.",
      "parameters": [
        {
          "name": "typeArg",
          "description": "Is a DOMString representing the name of the event."
        },
        {
          "name": "closeEventInitOptional",
          "description": ""
        }
      ]
    },
    {
      "name": "CloseEvent.code",
      "link": "/en-US/docs/Web/API/CloseEvent/code",
      "description": "Returns an unsigned short containing the close code send by the server. The following values are permitted status codes. Status code Name Description 0–999   Reserved and not used. 1000 CLOSE_NORMAL Normal closure; the connection successfully completed whatever purpose for which it was created. 1001 CLOSE_GOING_AWAY The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection. 1002 CLOSE_PROTOCOL_ERROR The endpoint is terminating the connection due to a protocol error. 1003 CLOSE_UNSUPPORTED The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data). 1004   Reserved. A meaning might be defined in the future. 1005 CLOSE_NO_STATUS Reserved.  Indicates that no status code was provided even though one was expected. 1006 CLOSE_ABNORMAL Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected. 1007 Unsupported Data The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message). 1008 Policy Violation The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable. 1009 CLOSE_TOO_LARGE The endpoint is terminating the connection because a data frame was received that is too large. 1010 Missing Extension The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn\u0027t. 1011 Internal Error The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request. 1012 Service Restart The server is terminating the connection because it is restarting. [Ref] 1013 Try Again Later The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients. [Ref] 1014   Reserved for future use by the WebSocket standard. 1015 TLS Handshake Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can\u0027t be verified). 1016–1999   Reserved for future use by the WebSocket standard. 2000–2999   Reserved for use by WebSocket extensions. 3000–3999   Available for use by libraries and frameworks. May not be used by applications. Available for registration at the IANA via first-come, first-serve. 4000–4999   Available for use by applications."
    },
    {
      "name": "CloseEvent.reason",
      "link": "/en-US/docs/Web/API/CloseEvent/reason",
      "description": "Returns a DOMString indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol."
    },
    {
      "name": "CloseEvent.wasClean",
      "link": "/en-US/docs/Web/API/CloseEvent/wasClean",
      "description": "Returns a Boolean that Indicates whether or not the connection was cleanly closed."
    },
    {
      "name": "CloseEvent.initCloseEvent()",
      "link": "/en-US/docs/Web/API/CloseEvent/initCloseEvent",
      "description": "Initializes the value of a CloseEvent created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the CloseEvent() constructor instead.",
      "parameters": [
        {
          "name": "type",
          "description": "the string to set the event\u0027s type to. Possible types for mouse events include: click, mousedown, mouseup, mouseover, mousemove, mouseout."
        },
        {
          "name": "canBubble",
          "description": "whether or not the event can bubble. Sets the value of Event.bubbles."
        },
        {
          "name": "cancelable",
          "description": "whether or not the event\u0027s default action can be prevented. Sets the value of Event.cancelable."
        },
        {
          "name": "wasClean",
          "description": "whether or not the connection was cleanly closed."
        },
        {
          "name": "reasonCode",
          "description": "the reason of the close."
        },
        {
          "name": "reason",
          "description": "a DOMString describing the reason of the close in shuman-readable way."
        },
        {
          "name": " ",
          "description": ""
        }
      ]
    }
  ]
}