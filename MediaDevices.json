{
  "name": "MediaDevices",
  "description": "This is an experimental technology Because this technology\u0027s specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes. The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.",
  "members": [
    {
      "name": "MediaDevices.ondevicechange",
      "link": "/en-US/docs/Web/API/MediaDevices/ondevicechange",
      "description": "The event handler for the devicechange event. This event is delivered to the MediaDevices object when a media input or output device is attached to or removed from the user\u0027s computer."
    },
    {
      "name": "EventTarget.addEventListener()",
      "link": "/en-US/docs/Web/API/EventTarget/addEventListener",
      "description": "Registers an event handler to a specific event type.",
      "parameters": [
        {
          "name": "type",
          "description": "A string representing the event type to listen for."
        },
        {
          "name": "listener",
          "description": "The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs. This must be an object implementing the EventListener interface, or a JavaScript function."
        },
        {
          "name": "options Optional",
          "description": "An options object that specifies characteristics about the event listener. The available options are: capture: A Boolean indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.   once: A Boolean indicating that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked. passive: A Boolean indicating that the listener will never call preventDefault(). If it does, the user agent should ignore it and generate a console warning. See Improving scrolling performance with passive listeners to learn more. mozSystemGroup: A Boolean indicating that the listener should be added to the system group. Available only in code running in XBL or in Firefox\u0027s chrome."
        },
        {
          "name": "useCapture Optional",
          "description": "A Boolean indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events that are bubbling upward through the tree will not trigger a listener designated to use capture. Event bubbling and capturing are two ways of propagating events which occur in an element that is nested within another element, when both elements have registered a handle for that event. The event propagation mode determines the order in which elements receive the event. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false."
        },
        {
          "name": "wantsUntrusted",
          "description": "A Firefox (Gecko)-specific parameter. If true, the listener receives synthetic events dispatched by web content (the default is false for chrome and true for regular web pages). This parameter is useful for code found in add-ons as well as the browser itself. See Interaction between privileged and non-privileged pages for an example."
        }
      ]
    },
    {
      "name": "MediaDevices.enumerateDevices()",
      "link": "/en-US/docs/Web/API/MediaDevices/enumerateDevices",
      "description": "Obtains an array of information about the media input and output devices available on the system."
    },
    {
      "name": "MediaDevices.getSupportedConstraints()",
      "link": "/en-US/docs/Web/API/MediaDevices/getSupportedConstraints",
      "description": "Returns an object conforming to MediaTrackSupportedConstraints indicating which constrainable properties are supported on the MediaStreamTrack interface. See \"Capabilities and constraints\" in Media Capture and Streams API (Media Streams) to learn more about constraints and how to use them."
    },
    {
      "name": "MediaDevices.getUserMedia()",
      "link": "/en-US/docs/Web/API/MediaDevices/getUserMedia",
      "description": "With the user\u0027s permission through a prompt, turns on a camera or screensharing and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.",
      "parameters": [
        {
          "name": "constraints",
          "description": "A MediaStreamConstraints object specifying the types of media to request, along with any requirements for each type. The constraints parameter is a MediaStreamConstraints object with two members: video and audio, describing the media types requested. Either or both must be specified. If the browser cannot find all media tracks with the specified types that meet the constraints given, then the returned promise is rejected with NotFoundError. The following requests both audio and video without any specific requirements: { audio: true, video: true } If true is specified for a media type, the resulting stream is required to have that type of track in it. If one cannot be included for any reason, the call to getUserMedia() will result in an error. While information about a user\u0027s cameras and microphones are inaccessible for privacy reasons, an application can request the camera and microphone capabilities it needs and wants, using additional constraints. The following expresses a preference for 1280x720 camera resolution: {\n  audio: true,\n  video: { width: 1280, height: 720 }\n} The browser will try to honor this, but may return other resolutions if an exact match is not available, or the user overrides it. To require a capability, use the keywords min, max, or exact (a.k.a. min \u003d\u003d max). The following demands a minimum resolution of 1280x720: {\n  audio: true,\n  video: {\n    width: { min: 1280 },\n    height: { min: 720 }\n  }\n} If no camera exists with this resolution or higher, then the returned promise will be rejected with OverconstrainedError, and the user will not be prompted. The reason for the difference in behavior is that the keywords min, max, and exact are inherently mandatory, whereas plain values and a keyword called ideal are not. Here\u0027s a fuller example: {\n  audio: true,\n  video: {\n    width: { min: 1024, ideal: 1280, max: 1920 },\n    height: { min: 776, ideal: 720, max: 1080 }\n  }\n} An ideal value, when used, has gravity, which means that the browser will try to find the setting (and camera, if you have more than one), with the smallest fitness distance from the ideal values given. Plain values are inherently ideal, which means that the first of our resolution examples above could have been written like this: {\n  audio: true,\n  video: {\n    width: { ideal: 1280 },\n    height: { ideal: 720 }\n  }\n} Not all constraints are numbers. For example, on mobile devices, the following will prefer the front camera (if one is available) over the rear one: { audio: true, video: { facingMode: \"user\" } } To require the rear camera, use: { audio: true, video: { facingMode: { exact: \"environment\" } } }"
        },
        {
          "name": "AbortError",
          "description": "Although the user and operating system both granted access to the hardware device, and no hardware issues occurred that would cause a NotReadableError, some problem occurred which prevented the device from being used."
        },
        {
          "name": "NotAllowedError",
          "description": "The user has specified that the current browsing instance is not permitted access to the device; or the user has denied access for the current session; or the user has denied all access to user media devices globally. Older versions of the specification used SecurityError for this instead; SecurityError has taken on a new meaning."
        },
        {
          "name": "NotFoundError",
          "description": "No media tracks of the type specified were found that satisfy the given constraints."
        },
        {
          "name": "NotReadableError",
          "description": "Although the user granted permission to use the matching devices, a hardware error occurred at the operating system, browser, or Web page level which prevented access to the device."
        },
        {
          "name": "OverConstrainedError",
          "description": "The specified constraints resulted in no candidate devices which met the criteria requested. The error is an object of type OverconstrainedError, and has a constraint property whose string value is the name of a constraint which was impossible to meet, and a message property containing a human-readable string explaining the problem. Because this error can occur even when the user has not yet granted permission to use the underlying device, it can potentially be used as a fingerprinting surface."
        },
        {
          "name": "SecurityError",
          "description": "User media support is disabled on the Document on which getUserMedia() was called. The mechanism by which user media support is enabled and disabled is left up to the individual user agent."
        },
        {
          "name": "TypeError",
          "description": "The list of constraints specified is empty, or has all constraints set to false."
        }
      ]
    },
    {
      "name": "EventTarget.removeEventListener()",
      "link": "/en-US/docs/Web/API/EventTarget/removeEventListener",
      "description": "Removes an event listener.",
      "parameters": [
        {
          "name": "type",
          "description": "A string which specifies the type of event for which to remove an event."
        },
        {
          "name": "listener",
          "description": "The EventListener function of the event handler to remove from the event target."
        },
        {
          "name": "options Optional",
          "description": "An options object that specifies characteristics about the event listener. The available options are: capture: A Boolean that indicates that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.   passive: A Boolean indicating that the listener will never call preventDefault(). If it does, the user agent should ignore it and generate a console warning. mozSystemGroup: Available only in code running in XBL or in Firefox\u0027 chrome, it is a Boolean defining if the listener is added to the system group."
        },
        {
          "name": "useCapture Optional",
          "description": "Specifies whether the EventListener to be removed is registered as a capturing listener or not. If this parameter is absent, a default value of false is assumed."
        }
      ]
    }
  ]
}