{
  "name": "ServiceWorkerRegistration",
  "description": "This is an experimental technology Because this technology\u0027s specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes. The ServiceWorkerRegistration interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.",
  "members": [
    {
      "name": "ServiceWorkerRegistration.scope",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/scope",
      "description": "Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the ServiceWorker."
    },
    {
      "name": "ServiceWorkerRegistration.installing",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/installing",
      "description": "Returns a service worker whose state is installing. This is initially set to null."
    },
    {
      "name": "ServiceWorkerRegistration.waiting",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/waiting",
      "description": "Returns a service worker whose state is waiting. This is initially set to null."
    },
    {
      "name": "ServiceWorkerRegistration.active",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/active",
      "description": "Returns a service worker whose state is either activating or activated. This is initially set to null. An active worker will control a ServiceWorkerClient if the client\u0027s URL falls within the scope of the registration (the scope option set when ServiceWorkerContainer.register is first called.)"
    },
    {
      "name": "ServiceWorkerRegistration.navigationPreload",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/navigationPreload",
      "description": "Returns the instance of NavigationPreloadManager associated with the current service worker registration."
    },
    {
      "name": "serviceWorkerRegistration.periodicSync",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/periodicSync",
      "description": "Returns a reference to the PeriodicSyncManager interface, which manages periodic background synchronization processes."
    },
    {
      "name": "ServiceWorkerRegistration.pushManager",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/pushManager",
      "description": "Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status."
    },
    {
      "name": "ServiceWorkerRegistration.sync",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/sync",
      "description": "Returns a reference to the SyncManager interface, which manages background synchronization processes."
    },
    {
      "name": "ServiceWorkerRegistration.onupdatefound",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/onupdatefound",
      "description": "An EventListener property called whenever an event of type updatefound is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker."
    },
    {
      "name": "ServiceWorkerRegistration.getNotifications()",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/getNotifications",
      "description": "Returns a Promise that resolves to an array of Notification objects.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An options object that can contain options to filter the notifications returned. The available options are: tag: A DOMString representing a notification tag. If specified, only notifications that have this tag will be returned."
        }
      ]
    },
    {
      "name": "ServiceWorkerRegistration.showNotification()",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification",
      "description": "Displays the notification with the requested title.",
      "parameters": [
        {
          "name": "title",
          "description": "The title that must be shown within the notification"
        },
        {
          "name": "options Optional",
          "description": "An object that allows to configure the notification. It can have the following properties: actions: An array of actions to display in the notification. The members of the array should be an object literal. It may contain the following values: action: A DOMString identifying a user action to be displayed on the notification. title: A DOMString containing action text to be shown to the user. icon: A USVString containg the URL of an icon to display with the action. Appropriate responses are built using event.action within the notificationclick event. badge: The URL of an image to represent the notification when there is not enough space to display the notification itself such as, for example, the Android Notification Bar. On Android devices, the badge should accommodate devices up to 4x resolution, about 96 by 96 px, and the image will be automatically masked. body: A string representing an extra content to display within the notification. dir : The direction of the notification; it can be auto, ltr, or rtl icon: The URL of an image to be used as an icon by the notification. image: a USVSTring containing the URL of an image to be displayed in the notification. lang: Specify the lang used within the notification. This string must be a valid BCP 47 language tag. renotify: A boolean that indicates whether to supress vibrations and audible alerts when resusing a tag value. The default is false. requireInteraction: Indicates that on devices with sufficiently large screens, a notification should remain active until the user clicks or dismisses it. If this value is absent or false, the desktop version of Chrome will auto-minimize notifications after approximately twenty seconds. The default value is false. tag: An ID for a given notification that allows you to find, replace, or remove the notification using script if necessary. vibrate: A vibration pattern to run with the display of the notification. A vibration pattern can be an array with as few as one member. The values are times in milliseconds where the even indices (0, 2, 4, etc.) indicate how long to vibrate and the odd indices indicate how long to pause. For example [300, 100, 400] would vibrate 300ms, pause 100ms, then vibrate 400ms. data: Arbitrary data that you want associated with the notification. This can be of any data type."
        }
      ]
    },
    {
      "name": "ServiceWorkerRegistration.update()",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/update",
      "description": "Checks the server for an updated version of the service worker without consulting caches."
    },
    {
      "name": "ServiceWorkerRegistration.unregister()",
      "link": "/en-US/docs/Web/API/ServiceWorkerRegistration/unregister",
      "description": "Unregisters the service worker registration and returns a promise (see Promise). The service worker will finish any ongoing operations before it is unregistered."
    }
  ]
}