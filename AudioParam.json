{
  "name": "AudioParam",
  "description": "",
  "members": [
    {
      "name": "AudioParam.defaultValue",
      "link": "/en-US/docs/Web/API/AudioParam/defaultValue",
      "description": "Represents the initial volume of the attribute as defined by the specific AudioNode creating the AudioParam."
    },
    {
      "name": "AudioParam.maxValue",
      "link": "/en-US/docs/Web/API/AudioParam/maxValue",
      "description": "Represents the maximum possible value for the parameter\u0027s nominal (effective) range. "
    },
    {
      "name": "AudioParam.minValue",
      "link": "/en-US/docs/Web/API/AudioParam/minValue",
      "description": "Represents the minimum possible value for the parameter\u0027s nominal (effective) range. "
    },
    {
      "name": "AudioParam.value",
      "link": "/en-US/docs/Web/API/AudioParam/value",
      "description": "Represents the parameter\u0027s current volume as a floating point value; initially set to the value of AudioParam.defaultValue. Though it can be set, any modifications happening while there are automation events scheduled — that is events scheduled using the methods of the AudioParam — are ignored, without raising any exception."
    },
    {
      "name": "AudioParam.setValueAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/setValueAtTime",
      "description": "Schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter.",
      "parameters": [
        {
          "name": "value",
          "description": "A floating point number representing the value the AudioParam will change to at the given time."
        },
        {
          "name": "startTime",
          "description": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen. A TypeError is thrown if this value is negative."
        }
      ]
    },
    {
      "name": "AudioParam.linearRampToValueAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime",
      "description": "Schedules a gradual linear change in the value of the AudioParam. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.",
      "parameters": [
        {
          "name": "value",
          "description": "A floating point number representing the value the AudioParam will ramp to by the given time."
        },
        {
          "name": "endTime",
          "description": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop."
        }
      ]
    },
    {
      "name": "AudioParam.exponentialRampToValueAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime",
      "description": "Schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.",
      "parameters": [
        {
          "name": "value",
          "description": "A floating point number representing the value the AudioParam will ramp to by the given time."
        },
        {
          "name": "endTime",
          "description": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop."
        }
      ]
    },
    {
      "name": "AudioParam.setTargetAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/setTargetAtTime",
      "description": "Schedules the start of a change to the value of the AudioParam. The change starts at the time specified in startTime and exponentially moves towards the value given by the target parameter. The exponential decay rate is defined by the timeConstant parameter, which is a time measured in seconds.",
      "parameters": [
        {
          "name": "target",
          "description": "The value the parameter will start to transition towards at the given start time."
        },
        {
          "name": "startTime",
          "description": "The time that the exponential transition will begin, which will be relative to AudioContext.currentTime."
        },
        {
          "name": "timeConstant",
          "description": "The time-constant value of first-order filter (exponential) approach to the target value. The larger this value is, the slower the transition will be."
        }
      ]
    },
    {
      "name": "AudioParam.setValueCurveAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/setValueCurveAtTime",
      "description": "Schedules the values of the AudioParam to follow a set of values, defined by the values Float32Array scaled to fit into the given interval, starting at startTime, and having a specific duration.",
      "parameters": [
        {
          "name": "values",
          "description": "A Float32Array representing the value curve the AudioParam will change through along the duration. Every value in the array must be a finite number; if any value is NaN, Infinity, or -Infinity, a TypeError exception is thrown."
        },
        {
          "name": "startTime",
          "description": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen."
        },
        {
          "name": "duration",
          "description": "A double representing the time (in seconds) the values will be changed between. The values are spaced equally along this duration."
        },
        {
          "name": "TypeError",
          "description": "One or more of the values in the values array is non-finite. Non-finite values are NaN, Infinity, and -Infinity."
        }
      ]
    },
    {
      "name": "AudioParam.cancelScheduledValues()",
      "link": "/en-US/docs/Web/API/AudioParam/cancelScheduledValues",
      "description": "Cancels all scheduled future changes to the AudioParam.",
      "parameters": [
        {
          "name": "startTime",
          "description": "A double representing the time (in seconds) after the AudioContext was first created after which all scheduled changes will be cancelled."
        }
      ]
    },
    {
      "name": "AudioParam.cancelAndHoldAtTime()",
      "link": "/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime",
      "description": "Cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods. The new value is given in the value parameter.",
      "parameters": [
        {
          "name": "cancelTime",
          "description": "A double representing the time (in seconds) after the AudioContext was first created after which all scheduled changes will be cancelled."
        }
      ]
    }
  ]
}