{
  "name": "IDBDatabase",
  "description": "",
  "members": [
    {
      "name": "IDBDatabase.name",
      "link": "/en-US/docs/Web/API/IDBDatabase/name",
      "description": "A DOMString that contains the name of the connected database."
    },
    {
      "name": "IDBDatabase.version",
      "link": "/en-US/docs/Web/API/IDBDatabase/version",
      "description": "A 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string."
    },
    {
      "name": "IDBDatabase.objectStoreNames",
      "link": "/en-US/docs/Web/API/IDBDatabase/objectStoreNames",
      "description": "A DOMStringList that contains a list of the names of the object stores currently in the connected database."
    },
    {
      "name": "IDBDatabase.onabort",
      "link": "/en-US/docs/Web/API/IDBDatabase/onabort",
      "description": "Fires when access of the database is aborted."
    },
    {
      "name": "IDBDatabase.onclose",
      "link": "/en-US/docs/Web/API/IDBDatabase/onclose",
      "description": "Fires when the close event occurs; this happens when the database is unexpectedly closed, such as during application shutdown."
    },
    {
      "name": "IDBDatabase.onerror",
      "link": "/en-US/docs/Web/API/IDBDatabase/onerror",
      "description": "Fires when access to the database fails."
    },
    {
      "name": "IDBDatabase.onversionchange",
      "link": "/en-US/docs/Web/API/IDBDatabase/onversionchange",
      "description": "Fires when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase() was requested elsewhere (most probably in another window/tab on the same computer). This is different from the version change transaction (see IDBVersionChangeEvent), but it is related."
    },
    {
      "name": "IDBDatabase.close()",
      "link": "/en-US/docs/Web/API/IDBDatabase/close",
      "description": "Returns immediately and closes the connection to a database in a separate thread."
    },
    {
      "name": "IDBDatabase.createObjectStore()",
      "link": "/en-US/docs/Web/API/IDBDatabase/createObjectStore",
      "description": "Creates and returns a new object store or index.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the new object store to be created. Note that it is possible to create an object store with an empty name."
        },
        {
          "name": "optionalParameters Optional",
          "description": "An options object whose attributes are optional parameters to the method. It includes the following properties: Attribute Description keyPath The key path to be used by the new object store. If empty or not specified, the object store is created without a key path and uses out-of-line keys. You can also pass in an array as a keyPath. autoIncrement If true, the object store has a key generator. Defaults to false. Unknown parameters are ignored."
        },
        {
          "name": "IDBObjectStore",
          "description": "The newly created object store."
        }
      ]
    },
    {
      "name": "IDBDatabase.deleteObjectStore()",
      "link": "/en-US/docs/Web/API/IDBDatabase/deleteObjectStore",
      "description": "Destroys the object store with the given name in the connected database, along with any indexes that reference it.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the object store you want to delete."
        }
      ]
    },
    {
      "name": "IDBDatabase.transaction()",
      "link": "/en-US/docs/Web/API/IDBDatabase/transaction",
      "description": "Immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store. Runs in a separate thread.",
      "parameters": [
        {
          "name": "storeNames",
          "description": "The names of object stores and indexes that are in the scope of the new transaction, declared as an array of strings. Specify only the object stores that you need to access. If you need to access only one object store, you can specify its name as a string. Therefore the following lines are equivalent:"
        },
        {
          "name": "mode",
          "description": "Optional. The types of access that can be performed in the transaction. Transactions are opened in one of three modes: readonly, readwrite and readwriteflush (non-standard, Firefox-only.) versionchange mode can\u0027t be specified here. If you don\u0027t provide the parameter, the default access mode is readonly. To avoid slowing things down, don\u0027t open a readwrite transaction unless you actually need to write into the database."
        }
      ]
    }
  ]
}