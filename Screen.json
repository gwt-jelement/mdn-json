{
  "name": "Screen",
  "description": "The Screen interface represents a screen, usually the one on which the current window is being rendered.",
  "members": [
    {
      "name": "Screen.availTop",
      "link": "/en-US/docs/Web/API/Screen/availTop",
      "description": "Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features."
    },
    {
      "name": "Screen.availLeft",
      "link": "/en-US/docs/Web/API/Screen/availLeft",
      "description": "Returns the first available pixel available from the left side of the screen."
    },
    {
      "name": "Screen.availHeight",
      "link": "/en-US/docs/Web/API/Screen/availHeight",
      "description": "Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows."
    },
    {
      "name": "Screen.availWidth",
      "link": "/en-US/docs/Web/API/Screen/availWidth",
      "description": "Returns the amount of horizontal space in pixels available to the window."
    },
    {
      "name": "Screen.colorDepth",
      "link": "/en-US/docs/Web/API/Screen/colorDepth",
      "description": "Returns the color depth of the screen."
    },
    {
      "name": "Screen.height",
      "link": "/en-US/docs/Web/API/Screen/height",
      "description": "Returns the height of the screen in pixels."
    },
    {
      "name": "Screen.left",
      "link": "/en-US/docs/Web/API/Screen/left",
      "description": "Returns the distance in pixels from the left side of the main screen to the left side of the current screen."
    },
    {
      "name": "Screen.orientation",
      "link": "/en-US/docs/Web/API/Screen/orientation",
      "description": "Returns the current orientation of the screen."
    },
    {
      "name": "Screen.pixelDepth",
      "link": "/en-US/docs/Web/API/Screen/pixelDepth",
      "description": "Gets the bit depth of the screen."
    },
    {
      "name": "Screen.top",
      "link": "/en-US/docs/Web/API/Screen/top",
      "description": "Returns the distance in pixels from the top side of the current screen."
    },
    {
      "name": "Screen.width",
      "link": "/en-US/docs/Web/API/Screen/width",
      "description": "Returns the width of the screen."
    },
    {
      "name": "Screen.mozEnabled",
      "link": "/en-US/docs/Web/API/Screen/mozEnabled",
      "description": "Boolean. Setting to false will turn off the device\u0027s screen."
    },
    {
      "name": "Screen.mozBrightness",
      "link": "/en-US/docs/Web/API/Screen/mozBrightness",
      "description": "Controls the brightness of a device\u0027s screen. A double between 0 and 1.0 is expected."
    },
    {
      "name": "Screen.onorientationchange",
      "link": "/en-US/docs/Web/API/Screen/onorientationchange",
      "description": "A handler for the orientationchange events."
    },
    {
      "name": "Screen.lockOrientation",
      "link": "/en-US/docs/Web/API/Screen/lockOrientation",
      "description": "Lock the screen orientation (only works in fullscreen or for installed apps)",
      "parameters": [
        {
          "name": "orientation",
          "description": "The orientation into which to lock the screen. This is either a string or an array of strings. Passing several strings lets the screen rotate only in the selected orientations."
        },
        {
          "name": "portrait-primary",
          "description": "It represents the orientation of the screen when it is in its primary portrait mode. A screen is considered in its primary portrait mode if the device is held in its normal position and that position is in portrait, or if the normal position of the device is in landscape and the device held turned by 90° clockwise. The normal position is device dependant."
        },
        {
          "name": "portrait-secondary",
          "description": "It represents the orientation of the screen when it is in its secondary portrait mode. A screen is considered in its secondary portrait mode if the device is held 180° from its normal position and that position is in portrait, or if the normal position of the device is in landscape and the device held is turned by 90° anticlockwise. The normal position is device dependant."
        },
        {
          "name": "landscape-primary",
          "description": "It represents the orientation of the screen when it is in its primary landscape mode. A screen is considered in its primary landscape mode if the device is held in its normal position and that position is in landscape, or if the normal position of the device is in portrait and the device held is turned by 90° clockwise. The normal position is device dependant."
        },
        {
          "name": "landscape-secondary",
          "description": "It represents the orientation of the screen when it is in its secondary landscape mode. A screen is considered in its secondary landscape mode if the device held is 180° from its normal position and that position is in landscape, or if the normal position of the device is in portrait and the device held is turned by 90° anticlockwise. The normal position is device dependant."
        },
        {
          "name": "portrait",
          "description": "It represents both portrait-primary and portrait-secondary."
        },
        {
          "name": "landscape",
          "description": "It represents both landscape-primary and landscape-secondary."
        },
        {
          "name": "default",
          "description": "It represents either portrait-primary and landscape-primary depends on natural orientation of devices. For example, if the panel resolution is 1280*800, default will make it landscape, if the resolution is 800*1280, default will make it to portrait."
        }
      ]
    },
    {
      "name": "Screen.unlockOrientation",
      "link": "/en-US/docs/Web/API/Screen/unlockOrientation",
      "description": "Unlock the screen orientation (only works in fullscreen or for installed apps)"
    },
    {
      "name": "EventTarget.addEventListener()",
      "link": "/en-US/docs/Web/API/EventTarget/addEventListener",
      "description": "Register an event handler of a specific event type on the EventTarget.",
      "parameters": [
        {
          "name": "type",
          "description": "A string representing the event type to listen for."
        },
        {
          "name": "listener",
          "description": "The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs. This must be an object implementing the EventListener interface, or a JavaScript function."
        },
        {
          "name": "options Optional",
          "description": "An options object that specifies characteristics about the event listener. The available options are: capture: A Boolean indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.   once: A Boolean indicating that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked. passive: A Boolean indicating that the listener will never call preventDefault(). If it does, the user agent should ignore it and generate a console warning. See Improving scrolling performance with passive listeners to learn more. mozSystemGroup: A Boolean indicating that the listener should be added to the system group. Available only in code running in XBL or in Firefox\u0027s chrome."
        },
        {
          "name": "useCapture Optional",
          "description": "A Boolean indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events that are bubbling upward through the tree will not trigger a listener designated to use capture. Event bubbling and capturing are two ways of propagating events which occur in an element that is nested within another element, when both elements have registered a handle for that event. The event propagation mode determines the order in which elements receive the event. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false."
        },
        {
          "name": "wantsUntrusted",
          "description": "A Firefox (Gecko)-specific parameter. If true, the listener receives synthetic events dispatched by web content (the default is false for chrome and true for regular web pages). This parameter is useful for code found in add-ons as well as the browser itself. See Interaction between privileged and non-privileged pages for an example."
        }
      ]
    },
    {
      "name": "EventTarget.removeEventListener()",
      "link": "/en-US/docs/Web/API/EventTarget/removeEventListener",
      "description": "Removes an event listener from the EventTarget.",
      "parameters": [
        {
          "name": "type",
          "description": "A string which specifies the type of event for which to remove an event."
        },
        {
          "name": "listener",
          "description": "The EventListener function of the event handler to remove from the event target."
        },
        {
          "name": "options Optional",
          "description": "An options object that specifies characteristics about the event listener. The available options are: capture: A Boolean that indicates that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.   passive: A Boolean indicating that the listener will never call preventDefault(). If it does, the user agent should ignore it and generate a console warning. mozSystemGroup: Available only in code running in XBL or in Firefox\u0027 chrome, it is a Boolean defining if the listener is added to the system group."
        },
        {
          "name": "useCapture Optional",
          "description": "Specifies whether the EventListener to be removed is registered as a capturing listener or not. If this parameter is absent, a default value of false is assumed."
        }
      ]
    },
    {
      "name": "EventTarget.dispatchEvent()",
      "link": "/en-US/docs/Web/API/EventTarget/dispatchEvent",
      "description": "Dispatch an event to this EventTarget."
    }
  ]
}