{
  "name": "SVGSVGElement",
  "description": "The SVGSVGElement interface provides access to the properties of \u003csvg\u003e elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
  "members": [
    {
      "name": "SVGSVGElement.x",
      "link": "/en-US/docs/Web/API/SVGSVGElement/x",
      "description": "An SVGAnimatedLength corresponding to the x attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.y",
      "link": "/en-US/docs/Web/API/SVGSVGElement/y",
      "description": "An SVGAnimatedLength corresponding to the y attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.width",
      "link": "/en-US/docs/Web/API/SVGSVGElement/width",
      "description": "An SVGAnimatedLength corresponding to the width attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.height",
      "link": "/en-US/docs/Web/API/SVGSVGElement/height",
      "description": "An SVGAnimatedLength corresponding to the height attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.contentScriptType",
      "link": "/en-US/docs/Web/API/SVGSVGElement/contentScriptType",
      "description": "An SVGAnimatedLength corresponding to the contentScriptType attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.contentStyleType",
      "link": "/en-US/docs/Web/API/SVGSVGElement/contentStyleType",
      "description": "An SVGAnimatedLength corresponding to the contentStyleType attribute of the given \u003csvg\u003e element."
    },
    {
      "name": "SVGSVGElement.viewport",
      "link": "/en-US/docs/Web/API/SVGSVGElement/viewport",
      "description": "An SVGRect containing the position and size of the viewport (implicit or explicit) that corresponds to the given \u003csvg\u003e element. When the browser is actually rendering the content, then the position and size values represent the actual values when rendering. The position and size values are unitless values in the coordinate system of the parent element. If no parent element exists (i.e., \u003csvg\u003e element represents the root of the document tree), if this SVG document is embedded as part of another document (e.g., via the HTML \u003cobject\u003e element), then the position and size are unitless values in the coordinate system of the parent document. (If the parent uses CSS or XSL layout, then unitless values represent pixel units for the current CSS or XSL viewport.)"
    },
    {
      "name": "SVGSVGElement.pixelUnitToMillimeterX",
      "link": "/en-US/docs/Web/API/SVGSVGElement/pixelUnitToMillimeterX",
      "description": "A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided."
    },
    {
      "name": "SVGSVGElement.pixelUnitToMillimeterY",
      "link": "/en-US/docs/Web/API/SVGSVGElement/pixelUnitToMillimeterY",
      "description": "A float representing the size of a pixel unit along the y-axis of the viewport."
    },
    {
      "name": "SVGSVGElement.screenPixelToMillimeterX",
      "link": "/en-US/docs/Web/API/SVGSVGElement/screenPixelToMillimeterX",
      "description": "User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the browser actually knows the physical size of a \"screen unit\", this float attribute will express that information; otherwise, user agents will provide a suitable default value such as .28mm."
    },
    {
      "name": "SVGSVGElement.screenPixelToMillimeterY",
      "link": "/en-US/docs/Web/API/SVGSVGElement/screenPixelToMillimeterY",
      "description": "Corresponding size of a screen pixel along the y-axis of the viewport."
    },
    {
      "name": "SVGSVGElement.useCurrentView",
      "link": "/en-US/docs/Web/API/SVGSVGElement/useCurrentView",
      "description": "The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the \"standard\" view, i.e., based on attributes on the \u003csvg\u003e element such as viewBox) or on a \"custom\" view (i.e., a hyperlink into a particular \u003cview\u003e or other element). If the initial view is the \"standard\" view, then this attribute is false. If the initial view is a \"custom\" view, then this attribute is true."
    },
    {
      "name": "SVGSVGElement.currentView",
      "link": "/en-US/docs/Web/API/SVGSVGElement/currentView",
      "description": "An SVGViewSpec defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation: If the initial view was a \"standard\" view, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly the values for transform and viewTarget within currentView will be null If the initial view was a link into a \u003cview\u003e element, then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given \u003cview\u003e element the values for transform and viewTarget within currentView will be null If the initial view was a link into another element (i.e., other than a \u003cview\u003e), then: the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor \u003csvg\u003e element the values for transform within currentView will be null the viewTarget within currentView will represent the target of the link If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then: the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier"
    },
    {
      "name": "SVGSVGElement.currentScale",
      "link": "/en-US/docs/Web/API/SVGSVGElement/currentScale",
      "description": "On an outermost \u003csvg\u003e element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes currentScale and currentTranslate are equivalent to the 2x3 matrix [a b c d e f] \u003d [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If \"magnification\" is enabled (i.e., zoomAndPan\u003d\"magnify\"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost \u003csvg\u003e element)."
    },
    {
      "name": "SVGSVGElement.currentTranslate",
      "link": "/en-US/docs/Web/API/SVGSVGElement/currentTranslate",
      "description": "An SVGPoint representing the translation factor that takes into account user \"magnification\" corresponding to an outermost \u003csvg\u003e element. The behavior is undefined for \u003csvg\u003e elements that are not at the outermost level."
    },
    {
      "name": "SVGSVGElement.suspendRedraw()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/suspendRedraw",
      "description": "Takes a time-out value which indicates that redraw shall not occur until: the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out. In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to suspendRedraw() and unsuspendRedraw() should, but need not be, made in balanced pairs. To suspend redraw actions as a collection of SVG DOM changes occur, precede the changes to the SVG DOM with a method call similar to: suspendHandleID \u003d suspendRedraw(maxWaitMilliseconds); and follow the changes with a method call similar to: unsuspendRedraw(suspendHandleID); Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls."
    },
    {
      "name": "SVGSVGElement.unsuspendRedraw()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/unsuspendRedraw",
      "description": "Cancels a specified suspendRedraw() by providing a unique suspend handle ID that was returned by a previous suspendRedraw() call."
    },
    {
      "name": "SVGSVGElement.unsuspendRedrawAll()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/unsuspendRedrawAll",
      "description": "Cancels all currently active suspendRedraw() method calls. This method is most useful at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() method calls have been cancelled."
    },
    {
      "name": "SVGSVGElement.forceRedraw()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/forceRedraw",
      "description": "In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating."
    },
    {
      "name": "SVGSVGElement.pauseAnimations()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/pauseAnimations",
      "description": "Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this \u003csvg\u003e element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused."
    },
    {
      "name": "SVGSVGElement.unpauseAnimations()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/unpauseAnimations",
      "description": "Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended."
    },
    {
      "name": "SVGSVGElement.animationsPaused()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/animationsPaused",
      "description": "Returns true if this SVG document fragment is in a paused state."
    },
    {
      "name": "SVGSVGElement.getCurrentTime()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/getCurrentTime",
      "description": "Returns the current time in seconds relative to the start time for the current SVG document fragment. If getCurrentTime is called before the document timeline has begun (for example, by script running in a \u003cscript\u003e element before the document\u0027s SVGLoad event is dispatched), then 0 is returned."
    },
    {
      "name": "SVGSVGElement.setCurrentTime()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/setCurrentTime",
      "description": "Adjusts the clock for this SVG document fragment, establishing a new current time. If setCurrentTime is called before the document timeline has begun (for example, by script running in a \u003cscript\u003e element before the document\u0027s SVGLoad event is dispatched), then the value of seconds in the last invocation of the method gives the time that the document will seek to once the document timeline has begun."
    },
    {
      "name": "SVGSVGElement.getIntersectionList()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/getIntersectionList",
      "description": "Returns a NodeList of graphics elements whose rendered content intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
    },
    {
      "name": "SVGSVGElement.getEnclosureList()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/getEnclosureList",
      "description": "Returns a NodeList of graphics elements whose rendered content is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
    },
    {
      "name": "SVGSVGElement.checkIntersection()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/checkIntersection",
      "description": "Returns true if the rendered content of the given element intersects the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
    },
    {
      "name": "SVGSVGElement.checkEnclosure()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/checkEnclosure",
      "description": "Returns true if the rendered content of the given element is entirely contained within the supplied rectangle. Each candidate graphics element is to be considered a match only if the same graphics element can be a target of pointer events as defined in pointer-events processing."
    },
    {
      "name": "SVGSVGElement.deselectAll()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/deselectAll",
      "description": "Unselects any selected objects, including any selections of text strings and type-in bars."
    },
    {
      "name": "SVGSVGElement.createSVGNumber()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGNumber",
      "description": "Creates an SVGNumber object outside of any document trees. The object is initialized to a value of zero."
    },
    {
      "name": "SVGSVGElement.createSVGLength()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGLength",
      "description": "Creates an SVGLength object outside of any document trees. The object is initialized to a value of zero user units."
    },
    {
      "name": "SVGSVGElement.createSVGAngle()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGAngle",
      "description": "Creates an SVGAngle object outside of any document trees. The object is initialized to a value of zero degrees (unitless)."
    },
    {
      "name": "SVGSVGElement.createSVGPoint()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGPoint",
      "description": "Creates an SVGPoint object outside of any document trees. The object is initialized to the point (0,0) in the user coordinate system."
    },
    {
      "name": "SVGSVGElement.createSVGMatrix()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGMatrix",
      "description": "Creates an SVGMatrix object outside of any document trees. The object is initialized to the identity matrix."
    },
    {
      "name": "SVGSVGElement.createSVGRect()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGRect",
      "description": "Creates an SVGRect object outside of any document trees. The object is initialized such that all values are set to 0 user units."
    },
    {
      "name": "SVGSVGElement.createSVGTransform()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGTransform",
      "description": "Creates an SVGTransform object outside of any document trees. The object is initialized to an identity matrix transform (SVG_TRANSFORM_MATRIX)."
    },
    {
      "name": "SVGSVGElement.createSVGTransformFromMatrix()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/createSVGTransformFromMatrix",
      "description": "Creates an SVGTransform object outside of any document trees. The object is initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX). The values from the parameter matrix are copied, the matrix parameter is not adopted as SVGTransform::matrix."
    },
    {
      "name": "SVGSVGElement.getElementById()",
      "link": "/en-US/docs/Web/API/SVGSVGElement/getElementById",
      "description": "Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. If an Element is found, that Element is returned. If no such element exists, returns null. Behavior is not defined if more than one element has this id."
    }
  ]
}