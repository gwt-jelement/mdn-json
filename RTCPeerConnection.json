{
  "name": "RTCPeerConnection",
  "description": "",
  "members": [
    {
      "name": "RTCPeerConnection()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection",
      "description": "The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer.",
      "parameters": [
        {
          "name": "configuration Optional",
          "description": "An RTCConfiguration dictionary providing options to configure the new connection."
        },
        {
          "name": "bundlePolicy Optional",
          "description": "Specifies how to handle negotiation of candidates when the remote peer is not compatible with the SDP BUNDLE standard. This must be one of the values from the enum RTCBundlePolicy. If this value isn\u0027t included in the dictionary, \"balanced\" is assumed."
        },
        {
          "name": "certificates Optional",
          "description": "An Array of objects of type RTCCertificate which are used by the connection for authentication. If this property isn\u0027t specified, a set of certificates is generated automatically for each RTCPeerConnection instance. Although only one certificate is used by a given connection, providing certificates for multiple algorithms may improve the odds of successfully connecting in some circumstances. See Using certificates below for additional information. This configuration option cannot be changed after it is first specified; once the certificates have been set, this property is ignored in future calls to RTCPeerConnection.setConfiguration()."
        },
        {
          "name": "iceCandidatePoolSize Optional",
          "description": "An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur). You may find in some cases that connections can be established more quickly by allowing the ICE agent to start fetching ICE candidates before you start trying to connect, so that they\u0027re already available for inspection when RTCPeerConnection.setLocalDescription() is called. Changing the size of the ICE candidate pool may trigger the beginning of ICE gathering."
        },
        {
          "name": "iceServers Optional",
          "description": "An array of RTCIceServer objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers. If this isn\u0027t specified, the ICE agent may choose to use its own ICE servers; otherwise, the connection attempt will be made with no STUN or TURN server available, which limits the connection to local peers."
        },
        {
          "name": "iceTransportPolicy Optional",
          "description": "The current ICE transport policy; this must be one of the values from the RTCIceTransportPolicy enum. If this isn\u0027t specified, \"all\" is assumed."
        },
        {
          "name": "peerIdentity Optional",
          "description": "A DOMString which specifies the target peer identity for the RTCPeerConnection. If this value is set (it defaults to null), the RTCPeerConnection will not connect to a remote peer unless it can successfully authenticate with the given name."
        },
        {
          "name": "rtcpMuxPolicy Optional",
          "description": "The RTCP mux policy to use when gathering ICE candidates, in order to support non-multiplexed RTCP. The value must be one of those from the RTCRtcpMuxPolicy enum. The default is \"require\"."
        }
      ]
    },
    {
      "name": "canTrickleIceCandidates",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates",
      "description": "The read-only property RTCPeerConnection.canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates."
    },
    {
      "name": "connectionState",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/connectionState",
      "description": "The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState."
    },
    {
      "name": "currentLocalDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription",
      "description": "The read-only property RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time theÂ  RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated."
    },
    {
      "name": "currentRemoteDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription",
      "description": "The read-only property RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated."
    },
    {
      "name": "defaultIceServers",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers",
      "description": "The read-only property RTCPeerConnection.defaultIceServers returns an array of objects based on the RTCIceServer dictionary, which indicates what, if any, ICE servers the browser will use by default if none are provided to the RTCPeerConnection in its RTCConfiguration. However, browsers are not required to provide any default ICE servers at all."
    },
    {
      "name": "iceConnectionState",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState",
      "description": "The read-only property RTCPeerConnection.iceConnectionState returns an enum of type RTCIceConnectionState which state of the ICE agent associated with the RTCPeerConnection."
    },
    {
      "name": "iceGatheringState",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState",
      "description": "The read-only property RTCPeerConnection.iceGatheringState returns an enum of type RTCIceGatheringState that describes connection\u0027s ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished."
    },
    {
      "name": "localDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/localDescription",
      "description": "The read-only property RTCPeerConnection.localDescription returns an RTCSessionDescription describing the session for the local end of the connection. If it has not yet been set, this is null."
    },
    {
      "name": "peerIdentity",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/peerIdentity",
      "description": "The read-only property RTCPeerConnection.peerIdentity returns an RTCIdentityAssertion, containing a DOMString once set and verified. If no peer has yet been set and verified, this property will return null. Once set, via the appropriate method, it can\u0027t be changed.",
      "parameters": [
        {
          "name": "identity",
          "description": "Is a RTCIdentityAssertion, a dictionary of two values: \"idp\", a DOMString representing the domain name of the Identity Provider who produced the assertion. \"name\", a DOMString containing the verified assertion."
        }
      ]
    },
    {
      "name": "pendingLocalDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription",
      "description": "The read-only property RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentLocalDescription or RTCPeerConnection.localDescription to get the current state of the endpoint. For details on the difference, see \"Pending and current descriptions\" in WebRTC connectivity."
    },
    {
      "name": "pendingRemoteDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription",
      "description": "The read-only property RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentRemoteDescription or RTCPeerConnection.remoteDescription to get the current session description for the remote endpoint. For details on the difference, see \"Pending and current descriptions\" in WebRTC connectivity."
    },
    {
      "name": "remoteDescription",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/remoteDescription",
      "description": "The read-only property RTCPeerConnection.remoteDescription returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn\u0027t been set yet, this is null."
    },
    {
      "name": "sctp",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/sctp",
      "description": "The read-only sctp property on the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received. If SCTP hasn\u0027t been negotiated, this value is null."
    },
    {
      "name": "signalingState",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/signalingState",
      "description": "The read-only signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See \"Signaling\" in Lifetime of a WebRTC session for more details about the signaling process."
    },
    {
      "name": "onaddstream",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onaddstream",
      "description": "The RTCPeerConnection.onaddstream event handler is a property containing the code to execute whenÂ the addstream event, of type MediaStreamEvent, is received by this RTCPeerConnection. Such an event is sent when a MediaStream is added to this connection by the remote peer. The event is sent immediately after the call setRemoteDescription() and doesn\u0027t wait for the result of the SDP negotiation."
    },
    {
      "name": "onconnectionstatechange",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange",
      "description": "The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler which is called to handle the connectionstatechange event when it occurs on an instance of RTCPeerConnection. This happens whenever the aggregate state of the connection changes."
    },
    {
      "name": "ondatachannel",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/ondatachannel",
      "description": "The RTCPeerConnection.ondatachannel property is an EventHandler which specifies a function which is called when the datachannel event occurs on an RTCPeerConnection. This event, of type RTCDataChannelEvent, is sent when an RTCDataChannel is added to the connection by the remote peer calling createDataChannel()."
    },
    {
      "name": "onicecandidate",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onicecandidate",
      "description": "The RTCPeerConnection.onicecandidate property is an EventHandler which specifies a function to be called when the icecandidate event occurs on an RTCPeerConnection instance. This happens whenever the local ICE agent needs to deliver a message to the other peer through the signaling server."
    },
    {
      "name": "oniceconnectionstatechange",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange",
      "description": "The RTCPeerConnection.oniceconnectionstatechange property is an event handler which specifies a function to be called when the iceconnectionstatechange event is fired on an RTCPeerConnection instance. This happens when the state of the connection\u0027s ICE agent, as represented by the iceConnectionState property, changes."
    },
    {
      "name": "onicegatheringstatechange",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange",
      "description": "The RTCPeerConnection.onicegatheringstatechange property is an EventHandler which specifies a function to be called when the icegatheringstatechange event is sent to an RTCPeerConnection instance. This happens when the ICE gathering stateâthat is, whether or not the ICE agent is actively gathering candidatesâchanges."
    },
    {
      "name": "onidentityresult",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onidentityresult",
      "description": "The RTCPeerConnection.onidentityresult event handler is a property containing the code to execute when the identityresult event, of type RTCIdentityEvent, is received by this RTCPeerConnection. Such an event is sent when an identity assertion is generated, via getIdentityAssertion() or during the creation of an offer or an answer."
    },
    {
      "name": "onidpassertionerror",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror",
      "description": "The RTCPeerConnection.onidpassertionerror event handler is a property containing the code to execute whent the idpassertionerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while generating an identity assertion."
    },
    {
      "name": "onidpvalidationerror",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror",
      "description": "The RTCPeerConnection.onidpvalidationerror event handler is a property containing the code to execute whent the idpvalidationerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while validating an identity assertion."
    },
    {
      "name": "onnegotiationneeded",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded",
      "description": "The RTCPeerConnection.onnegotiationneeded property is an EventHandler which specifies a function which is called to handle the negotiationneeded event when it occurs on an RTCPeerConnection instance. This event is fired when a change has occurred which requires session negotiation."
    },
    {
      "name": "onpeeridentity",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity",
      "description": "The RTCPeerConnection.onpeeridentity event handler is a property containing the code to execute whent the peeridentity event, of type Event, is received by this RTCPeerConnection. Such an event is sent when an identity assertion, received from a peer, has been successfully validated."
    },
    {
      "name": "onremovestream",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onremovestream",
      "description": "The RTCPeerConnection.onremovestream event handler is a property containing the code to execute whenÂ the removestream event, of type MediaStreamEvent, is received by this RTCPeerConnection. Such an event is sent when a MediaStream is removed from this connection."
    },
    {
      "name": "onsignalingstatechange",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange",
      "description": "The RTCPeerConnection.onsignalingstatechange property is an EventHandler which specifies a function to be called when the signalingstatechange event occurs on an RTCPeerConnection interface. The function receives as input the event object, of type Event; this event is sent when the value of RTCPeerConnection.signalingState changes, as the result of a call to either setLocalDescription() or setRemoteDescription()."
    },
    {
      "name": "ontrack",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/ontrack",
      "description": "The RTCPeerConnection.ontrack property is an EventHandler which specifies a function to be called when the track event occurs on an RTCPeerConnection interface. The function receives as input the event object, of type RTCTrackEvent; this event is sent when a new incoming MediaStreamTrack has been created and associated with an RTCRtpReceiver object which has been added to the set of receivers on connection."
    },
    {
      "name": "addIceCandidate()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate",
      "description": "When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser\u0027s ICE agent by calling RTCPeerConnection.addIceCandidate().",
      "parameters": [
        {
          "name": "candidate",
          "description": "An object conforming to the RTCIceCandidateInit dictionary; the contents of the object should be constructed from a message received over the signaling channel, describing a newly received ICE candidate that\u0027s ready to be delivered to the local ICE agent."
        },
        {
          "name": "successCallback",
          "description": "A function to be called when the ICE candidate has been successfully added. This function receives no input parameters and doesn\u0027t return a value."
        },
        {
          "name": "failureCallback",
          "description": "A function to be called if attempting to add the ICE candidate fails. Receives as input a DOMException object describing why failure occurred."
        },
        {
          "name": "TypeError",
          "description": "The specified candidate doesn\u0027t have values for both sdpMid and sdpMLineIndex."
        },
        {
          "name": "InvalidStateError",
          "description": "The RTCPeerConnection currently has no remote peer established (remoteDescription is null)."
        },
        {
          "name": "OperationError",
          "description": "A non-null value was specified for sdpMid, but the value doesn\u0027t match the mid of any media description in the remoteDescription, or sdpMLineIndex is greater than or equal to the number of media descriptions in remoteDescription. This error can also be thrown if a value is given for ufrag that doesn\u0027t match the value of ufrag in any of the remote description being selected. OperationError also occurs if the attempt to add the candidate fails for any other reason."
        }
      ]
    },
    {
      "name": "addStream()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/addStream",
      "description": "The RTCPeerConnection.addStream() method adds a MediaStream as a local source of audio or video. If the negotiation already happened, a new one will be needed for the remote peer to be able to use it.",
      "parameters": [
        {
          "name": "mediaStream",
          "description": "A MediaStream object indicating the stream to add to the WebRTC peer connection."
        }
      ]
    },
    {
      "name": "addTrack()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/addTrack",
      "description": "The RTCPeerConnection method addTrack() adds a new media track to the connection. The track is added to the set of tracks which will be transmitted to the other peer.",
      "parameters": [
        {
          "name": "track",
          "description": "A MediaStreamTrack object representing the media track to add to the peer connection."
        },
        {
          "name": "stream...",
          "description": "One or more MediaStream objects in which the specified track are to be contained."
        },
        {
          "name": "InvalidAccessError",
          "description": "The specified track is already a member of the set of senders for the RTCPeerConnection."
        },
        {
          "name": "InvalidStateError",
          "description": "The RTCPeerConnection is closed."
        }
      ]
    },
    {
      "name": "close()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/close",
      "description": "The RTCPeerConnection.close() method closes the current peer connection."
    },
    {
      "name": "createAnswer()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/createAnswer",
      "description": "The createAnswer() method on the RTCPeerConnection interface creates an SDP answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any ICE candidates whreiady been gathered. The answer is delivered to the returned Promise, and should then be sent to the source of the offer to continue the negotiation process.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An object which contains options which customize the answer; this is based on the RTCAnswerOptions dictionary."
        },
        {
          "name": "successCallback",
          "description": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created answer."
        },
        {
          "name": "failureCallback",
          "description": "An RTCPeerConnectionErrorCallback which will be passed a single DOMError object explaining why the request to create an answer failed."
        },
        {
          "name": "options Optional",
          "description": "An optional RTCOfferOptions object providing options requested for the answer."
        },
        {
          "name": "NotReadableError",
          "description": "The identity provider wasn\u0027t able to provide an identity assertion."
        },
        {
          "name": "OperationError",
          "description": "Generation of the SDP failed for some reason; this is a general failure catch-all exception."
        }
      ]
    },
    {
      "name": "createOffer()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/createOffer",
      "description": "The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer which includes information about any MediaStreamTracks already attached to the WebRTC session, codec and options supported by the browser, and any candidates already gathered by the ICE agent, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An RTCOfferOptions dictionary providing options requested for the offer."
        },
        {
          "name": "iceRestart Optional",
          "description": "To restart ICE on an active connection, set this to true. This will cause the returned offer to have different credentials than those already in place. If you then apply the returned offer, ICE will restart. Specify false to keep the same credentials and therefore not restart ICE. The default is false."
        },
        {
          "name": "voiceActivityDetection Optional",
          "description": "Some codecs and hardware are able to detect when audio begins and ends by watching for \"silence\" (or relatively low sound levels) to occur. This reduces network bandwidth used for audio by only sending audio data when there\u0027s actually something to broadcast. However, in some cases, this is unwanted. For example, in the case of music or other non-voice transmission, this can cause loss of important low-volume sounds. Also, emergency calls should never cut audio when quiet. This option defaults to true (voice activity detection enabled)."
        },
        {
          "name": "Deprecated parameters",
          "description": ""
        },
        {
          "name": "successCallback",
          "description": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created offer."
        },
        {
          "name": "errorCallback",
          "description": "An RTCPeerConnectionErrorCallback which will be passed a single DOMError object explaining why the request to create an offer failed."
        },
        {
          "name": "options Optional",
          "description": "An optional RTCOfferOptions dictionary providing options requested for the offer."
        }
      ]
    },
    {
      "name": "generateCertificate()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/generateCertificate",
      "description": "The generateCertificate() method of the RTCPeerConnection interface creates and stores an X.509 certificate and corresponding private key then returns an RTCCertificate, providing access to it.",
      "parameters": [
        {
          "name": "keygenAlgorithm",
          "description": "A DOMStringÂ identifying the algorithm to use in creating the key."
        }
      ]
    },
    {
      "name": "getConfiguration()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getConfiguration",
      "description": "The RTCPeerConnection.getConfiguration() method returns an RTCConfiguration object which indicates the current configuration of the RTCPeerConnection on which the method is called."
    },
    {
      "name": "getIdentityAssertion()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion",
      "description": "The RTCPeerConnection.getIdentityAssertion() method initiates the gathering of an identity assertion. This has an effect only if the signalingState is not \"closed\"."
    },
    {
      "name": "getLocalStreams()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getLocalStreams",
      "description": "The RTCPeerConnection.getLocalStreams() method returns an array of MediaStream associated with the local end of the connection. The array may be empty."
    },
    {
      "name": "getReceivers()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getReceivers",
      "description": "The RTCPeerConnection.getReceivers() method returns an array of RTCRtpReceiver objects, each of which represents one RTP receiver. Each RTP receiver manages the reception and decoding of data for aÂ MediaStreamTrack on anÂ RTCPeerConnection"
    },
    {
      "name": "getRemoteStreams()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getRemoteStreams",
      "description": "The RTCPeerConnection.getRemoteStreams() method returns an array of MediaStream associated with the remote end of the connection. The array may be empty."
    },
    {
      "name": "getSenders()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getSenders",
      "description": "The RTCPeerConnection.getSenders() method returns an array of RTCRtpSender objects, each of which represents one RTP sender. Each RTP sender is responsible for transmitting data for one track, and provides methods and properties for examining and controlling the transmission and encoding of the track\u0027s data."
    },
    {
      "name": "getStreamById()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/getStreamById",
      "description": "The RTCPeerConnection.getStreamById() method returns the MediaStream with the given id that is associated with local or remote end of the connection. If no stream matches, it returns null.",
      "parameters": [
        {
          "name": "id",
          "description": "Is a DOMString corresponding to the stream to return."
        }
      ]
    },
    {
      "name": "removeStream()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/removeStream",
      "description": "The RTCPeerConnection.removeStream() method removes a MediaStream as a local source of audio or video. If the negotiation already happened, a new one will be needed for the remote peer to be able to use it. Because this method has been deprecated, you should instead use removeTrack() if your target browser versions have implemented it.",
      "parameters": [
        {
          "name": "mediaStream",
          "description": "A MediaStream specifying the stream to remove from the connection."
        }
      ]
    },
    {
      "name": "removeTrack()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/removeTrack",
      "description": "The RTCPeerConnection.removeTrack() method tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding RTCRtpSender from the list of senders as reported by RTCPeerConnection.getSenders(). If the track is already stopped, or is not in the connection\u0027s senders list, this method has no effect.",
      "parameters": [
        {
          "name": "mediaTrack",
          "description": "A RTCRtpSender specifying the sender to remove from the connection."
        },
        {
          "name": "InvalidStateError",
          "description": "The connection is not open."
        }
      ]
    },
    {
      "name": "setConfiguration()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/setConfiguration",
      "description": "The RTCPeerConnection.setConfiguration() method sets the current configuration of the RTCPeerConnection based on the values included in the specified RTCConfiguration object. This lets you change the ICE servers used by the connection and which transport policies to use.",
      "parameters": [
        {
          "name": "configuration",
          "description": "An RTCConfiguration object which provides the options to be set. The changes are not additive; instead, the new values completely replace the existing ones."
        },
        {
          "name": "InvalidAccessError",
          "description": "One or more of the URLs specified in configuration.iceServers is a TURN server, but complete login information is not provided (that is, either the RTCIceServer.username or RTCIceServer.credentials is missing). This prevents successful login to the server."
        },
        {
          "name": "InvalidModificationError",
          "description": "The configuration includes changed identity information, but the connection already has identity information specified. This happens if configuration.peerIdentity or configuration.certificates is set and their values differ from the current configuration."
        },
        {
          "name": "InvalidStateError",
          "description": "The RTCPeerConnection is closed."
        },
        {
          "name": "SyntaxError",
          "description": "One or more of the URLs provided in the configuration.iceServers list is invalid."
        }
      ]
    },
    {
      "name": "setIdentityProvider()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider",
      "description": "The RTCPeerConnection.setIdentityProvider() method sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it (optional) and an optional username. The IdP will be used only when an assertion is needed.",
      "parameters": [
        {
          "name": "domainname",
          "description": "Is a DOMString is the domain name where the IdP is."
        },
        {
          "name": "protocol Optional",
          "description": "Is a DOMString representing the protocol used to communicate with the IdP. It defaults to \"default\" and is used to determine the URL where the IdP is listening."
        },
        {
          "name": "username Optional",
          "description": "Is a DOMString representing the username associated with the IdP."
        }
      ]
    },
    {
      "name": "setLocalDescription()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription",
      "description": "The RTCPeerConnection.setLocalDescription() method changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format.",
      "parameters": [
        {
          "name": "sessionDescription",
          "description": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration to be applied to the local end of the connection."
        },
        {
          "name": "successCallback",
          "description": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. At that time, the offer can be sent to a remote peer via the signaling server."
        },
        {
          "name": "errorCallback",
          "description": "A function matching the signautre RTCPeerConnectionErrorCallback which gets called if the description can\u0027t be set. It takes one input parameter: errorInformation: A DOMString describing the reason why the description couldn\u0027t be set."
        },
        {
          "name": "InvalidStateError",
          "description": "The connection\u0027s signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place."
        },
        {
          "name": "InvalidSessionDescriptionError",
          "description": "The RTCSessionDescription specified by the sessionDescription parameter is invalid."
        }
      ]
    },
    {
      "name": "setRemoteDescription()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription",
      "description": "The RTCPeerConnection.setRemoteDescription() method changes the remote description associated with the connection. This description specifies the properties of the remote end of the connection, including the media format.",
      "parameters": [
        {
          "name": "sessionDescription",
          "description": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration to be considered for the remote end of the connection."
        },
        {
          "name": "successCallback",
          "description": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. At that time, the offer can be sent to a remote peer via the signaling server."
        },
        {
          "name": "errorCallback",
          "description": "A function matching the signautre RTCPeerConnectionErrorCallback which gets called if the description can\u0027t be set. It takes one input parameter: errorInformation: A DOMString describing the reason why the description couldn\u0027t be set."
        },
        {
          "name": "InvalidStateError",
          "description": "The connection\u0027s signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place."
        },
        {
          "name": "InvalidSessionDescriptionError",
          "description": "The RTCSessionDescription specified by the sessionDescription parameter is invalid."
        }
      ]
    },
    {
      "name": "RTCPeerConnection.createDTMFSender()",
      "link": "/en-US/docs/Web/API/RTCPeerConnection/createDTMFSender",
      "description": "Creates a new RTCDTMFSender, associated to a specific MediaStreamTrack, that will be able to send DTMF phone signaling over the connection."
    }
  ]
}