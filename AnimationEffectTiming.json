{
  "name": "AnimationEffectTiming",
  "description": "",
  "members": [
    {
      "name": "AnimationEffectTimingReadOnly.delay",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/delay",
      "description": "The number of milliseconds to delay the start of the animation. Defaults to 0."
    },
    {
      "name": "AnimationEffectTimingReadOnly.endDelay",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/endDelay",
      "description": "The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0."
    },
    {
      "name": "AnimationEffectTimingReadOnly.fill",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/fill",
      "description": "Dictates whether the animation\u0027s effects should be reflected by the element(s) state prior to playing (backwards), retained after the animation has completed playing (forwards), or both. Defaults to none.",
      "parameters": [
        {
          "name": "none",
          "description": "The animation\u0027s effects are only visible while the animation is iterating or its playhead is positioned over an iteration. The animation\u0027s effects are not visible when its playState is pending with a delay, when its playState is finished, or during its endDelay or  delay."
        },
        {
          "name": "forwards",
          "description": "The animation\u0027s effects should be retained after the animation has completed playing, in spite of and during any endDelay or when its playState is finished."
        },
        {
          "name": "backwards",
          "description": "The animation\u0027s effects should be reflected by the element(s) state prior to playing, in spite of and during any delay and pending playState."
        },
        {
          "name": "both",
          "description": "Combining the effects of both forwards and backwards: The animation\u0027s effects should be reflected by the element(s) state prior to playing and retained after the animation has completed playing, in spite of and during any endDelay, delay and/or pending or finished playState."
        }
      ]
    },
    {
      "name": "AnimationEffectTimingReadOnly.iterationStart",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/iterationStart",
      "description": "A number representing the which repetition the animation begins at and its progress through it."
    },
    {
      "name": "AnimationEffectTimingReadOnly.iterations",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/iterations",
      "description": "The number of times the animation should repeat. Defaults to 1, and can also take a value of infinity to make it repeat infinitely."
    },
    {
      "name": "AnimationEffectTimingReadOnly.duration",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/duration",
      "description": "The number of milliseconds each iteration of the animation takes to complete. Defaults to 0."
    },
    {
      "name": "AnimationEffectReadOnly.direction",
      "link": "/en-US/docs/Web/API/AnimationEffectReadOnly/direction",
      "description": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.",
      "parameters": [
        {
          "name": "normal",
          "description": "The animation runs forwards, from beginning to end, in the way we experience the flow of time."
        },
        {
          "name": "reverse",
          "description": "The animation runs backwards, or \"rewinds.\""
        },
        {
          "name": "alternate",
          "description": "The animation switches direction after each iteration, going from forwards to backwards then back again every two iterations."
        },
        {
          "name": "alternate-reverse",
          "description": "The reverse of the above: the animation switches direction after each iteration, going from backwards to forwards then back again every two iterations."
        }
      ]
    },
    {
      "name": "AnimationEffectTimingReadOnly.easing",
      "link": "/en-US/docs/Web/API/AnimationEffectTimingReadOnly/easing",
      "description": "The rate of the animation\u0027s change over time. Accepts the pre-defined values linear, ease, ease-in, ease-out, and ease-in-out, or a custom cubic-bezier value like cubic-bezier(0.42, 0, 0.58, 1). Defaults to linear.",
      "parameters": [
        {
          "name": "linear",
          "description": "A constant rate of change, neither accelerating nor deccelerating. "
        },
        {
          "name": "cubic-bezier(\u003cnumber\u003e, \u003cnumber\u003e, \u003cnumber\u003e, \u003cnumber\u003e)",
          "description": "Specifies a cubic Bézier timing function. The four numbers specify points P1 and P2 of the curve as (x1, y1, x2, y2). Both x values must be in the range [0, 1] or the definition is invalid."
        },
        {
          "name": "ease",
          "description": "A decelerated rate of change, going from fast to slow. Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1)."
        },
        {
          "name": "ease-in",
          "description": "An accelerated rate of change, going from slow to fast. Equivalent to cubic-bezier(0.42, 0, 1, 1)."
        },
        {
          "name": "ease-out",
          "description": "Another decelerated rate of change, going from fast to slow. Equivalent to cubic-bezier(0, 0, 0.58, 1)."
        },
        {
          "name": "ease-in-out",
          "description": "This rate of change speeds up in the middle. Equivalent to cubic-bezier(0.42, 0, 0.58, 1)."
        },
        {
          "name": "frames(\u003cinteger\u003e)",
          "description": "Specifies a frames timing function, which breaks the animation down into a number of equal time intervals but also displays the start (0%) and end (100%) states for an equal amount of time to the other intervals. The browser flips to a different static frame when each interval is reached, rather than animating smoothly. See GitHub for a simple example that illustrates the difference between steps() and frames()."
        },
        {
          "name": "steps(\u003cinteger\u003e[, [ start | end ] ]?)",
          "description": "Specifies a step timing function, which breaks the animation down into a number of equal time intervals. The browser flips to a different static frame when each interval is reached, rather than animating smoothly. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value end."
        },
        {
          "name": "step-start",
          "description": "Equivalent to steps(1, start)"
        },
        {
          "name": "step-end",
          "description": "Equivalent to steps(1, end)."
        }
      ]
    }
  ]
}