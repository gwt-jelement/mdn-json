{
  "name": "HTMLCanvasElement",
  "description": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
  "members": [
    {
      "name": "HTMLCanvasElement.height",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/height",
      "description": "Is a positive integer reflecting the height HTML attribute of the \u003ccanvas\u003e element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used."
    },
    {
      "name": "HTMLCanvasElement.mozOpaque",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque",
      "description": "Is a Boolean reflecting the moz-opaque HTML attribute of the \u003ccanvas\u003e element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there\u0027s no translucency, painting performance can be optimized."
    },
    {
      "name": "HTMLCanvasElement.width",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/width",
      "description": "Is a positive integer reflecting the width HTML attribute of the \u003ccanvas\u003e element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used."
    },
    {
      "name": "HTMLCanvasElement.mozPrintCallback",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/mozPrintCallback",
      "description": "Is a function that is Initially null, Web content can set this to a JavaScript function that will be called if the page is printed. This function can then redraw the canvas at a higher resolution that is suitable for the printer being used. See this blog post."
    },
    {
      "name": "HTMLCanvasElement.captureStream()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/captureStream",
      "description": "Returns a CanvasCaptureMediaStream that is a real-time video capture of the surface of the canvas.",
      "parameters": [
        {
          "name": "frameRate Optional",
          "description": "A double-precision floating-point value that indicates the rate of capture of each frame. If not set, a new frame will be captured each time the canvas changes; if set to 0, a single frame will be captured."
        }
      ]
    },
    {
      "name": "HTMLCanvasElement.getContext()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/getContext",
      "description": "Returns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with \"2d\" returns a CanvasRenderingContext2D object, whereas calling it with \"experimental-webgl\" (or \"webgl\") returns a WebGLRenderingContext object. This context is only available on browsers that implement WebGL.",
      "parameters": [
        {
          "name": "contextType",
          "description": "Is a DOMString containing the context identifier defining the drawing context associated to the canvas. Possible values are: \"2d\", leading to the creation of a CanvasRenderingContext2D object representing a two-dimensional rendering context. \"webgl\" (or \"experimental-webgl\") which will create a WebGLRenderingContext object representing a three-dimensional rendering context. This context is only available on browsers that implement WebGL version 1 (OpenGL ES 2.0). \"webgl2\" which will create a WebGL2RenderingContext object representing a three-dimensional rendering context. This context is only available on browsers that implement WebGL version 2 (OpenGL ES 3.0). \"bitmaprenderer\" which will create a ImageBitmapRenderingContext which only provides functionality to replace the content of the canvas with a given ImageBitmap. Note: The identifier \"experimental-webgl\"Â are used in new implementations of WebGL. These implementation have not reached test suite conformance or the graphic drivers situation on the platform is not yet stable. The Khronos Group certifies WebGL implementations under certain conformance rules."
        },
        {
          "name": "contextAttributes",
          "description": "You can use several context attributes when creating your rendering context, for example: canvas.getContext(\u0027webgl\u0027, \n                 { antialias: false,\n                   depth: false }); 2d context attributes: alpha: Boolean that indicates if the canvas contains an alpha channel. If set to false, the browser now knows that the backdrop is always opaque, which can speed up drawing of transparent content and images then. (Gecko only) willReadFrequently: Boolean that indicates whether or not a lot of read-back operations are planned. This will force the use of a software (instead of hardware accelerated) 2D canvas and can save memory when calling getImageData() frequently. This option is only available, if the flag gfx.canvas.willReadFrequently.enable is set to true (which, by default, is only the case for B2G/Firefox OS). (Blink only) storage: String that indicates which storage is used (\"persistent\" by default). WebGL context attributes: alpha: Boolean that indicates if the canvas contains an alpha buffer. depth: Boolean that indicates that the drawing buffer has a depth buffer of at least 16 bits. stencil: Boolean that indicates that the drawing buffer has a stencil buffer of at least 8 bits. antialias: Boolean that indicates whether or not to perform anti-aliasing. premultipliedAlpha: Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha. preserveDrawingBuffer: If the value is true the buffers will not be cleared and will preserve their values until cleared or overwritten by the author. failIfMajorPerformanceCaveat: Boolean that indicates if a context will be created if the system performance is low."
        }
      ]
    },
    {
      "name": "HTMLCanvasElement.toDataURL()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/toDataURL",
      "description": "Returns a data-URL containing a representation of the image in the format specified by the type parameter (defaults to png). The returned image is in a resolution of 96dpi.",
      "parameters": [
        {
          "name": "type Optional",
          "description": "A DOMString indicating the image format. The default format type is image/png."
        },
        {
          "name": "encoderOptions Optional",
          "description": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. If this argument is anything else, the default value for image quality is used. The default value is 0.92. Other arguments are ignored."
        }
      ]
    },
    {
      "name": "HTMLCanvasElement.toBlob()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/toBlob",
      "description": "Creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.",
      "parameters": [
        {
          "name": "callback",
          "description": "A callback function with the resulting Blob object as a single argument."
        },
        {
          "name": "mimeType Optional",
          "description": "A DOMString indicating the image format. The default type is image/png."
        },
        {
          "name": "qualityArgument Optional",
          "description": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. If this argument is anything else, the default value for image quality is used. Other arguments are ignored."
        }
      ]
    },
    {
      "name": "HTMLCanvasElement.transferControlToOffscreen()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen",
      "description": "Transfers control to an OffscreenCanvas object, either on the main thread or on a worker."
    },
    {
      "name": "HTMLCanvasElement.mozGetAsFile()",
      "link": "/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile",
      "description": "Returns a File object representing the image contained in the canvas; this file is a memory-based file, with the specified name. If type is not specified, the image type is image/png.",
      "parameters": [
        {
          "name": "name",
          "description": "A DOMString indicating the file name."
        },
        {
          "name": "type Optional",
          "description": "A DOMString indicating the image format. The default type is image/png."
        }
      ]
    }
  ]
}