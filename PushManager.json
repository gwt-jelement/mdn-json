{
  "name": "PushManager",
  "description": "",
  "members": [
    {
      "name": "PushManager.getSubscription()",
      "link": "/en-US/docs/Web/API/PushManager/getSubscription",
      "description": "Retrieves an existing push subscription. It returns a Promise that resolves to a PushSubscription object containing details of an existing subscription. If no existing subscription exists, this resolves to a null value."
    },
    {
      "name": "PushManager.permissionState()",
      "link": "/en-US/docs/Web/API/PushManager/permissionState",
      "description": "Returns a Promise that resolves to the permission state of the current PushManager, which will be one of \u0027granted\u0027, \u0027denied\u0027, or \u0027prompt\u0027.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An object containing optional configuration parameters. It can have the following properties: userVisibleOnly: A boolean indicating that the returned push subscription will only be used for messages whose effect is made visible to the user. applicationServerKey: A public key your push server will use to send messages to client apps via a push server. This value is part of a signing key pair generated by your application server and usable with elliptic curve digital signature (ECDSA) over the P-256 curve. "
        }
      ]
    },
    {
      "name": "PushManager.subscribe()",
      "link": "/en-US/docs/Web/API/PushManager/subscribe",
      "description": "Subscribes to a push service. It returns a Promise that resolves to a PushSubscription object containing details of a push subscription. A new push subscription is created if the current service worker does not have an existing subscription.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An object containing optional configuration parameters. It can have the following properties: userVisibleOnly: A boolean indicating that the returned push subscription will only be used for messages whose effect is made visible to the user. applicationServerKey: A public key your push server will use to send messages to client apps via a push server. This value is part of a signing key pair generated by your application server and usable with elliptic curve digital signature (ECDSA) over the P-256 curve. This can be a DOMString (including Base64-encoded values) or an ArrayBuffer."
        }
      ]
    },
    {
      "name": "PushManager.hasPermission()",
      "link": "/en-US/docs/Web/API/PushManager/hasPermission",
      "description": "Returns a Promise that resolves to the PushPermissionStatus of the requesting webapp, which will be one of granted, denied, or default. Replaced by PushManager.permissionState()."
    },
    {
      "name": "PushManager.register()",
      "link": "/en-US/docs/Web/API/PushManager/register",
      "description": "Subscribes to a push subscription. Replaced by PushManager.subscribe()."
    },
    {
      "name": "PushManager.registrations()",
      "link": "/en-US/docs/Web/API/PushManager/registrations",
      "description": "Retrieves existing push subscriptions. Replaced by PushManager.getSubscription().",
      "parameters": [
        {
          "name": "pushEndpoint",
          "description": "A string representing the URL of the endpoint."
        },
        {
          "name": "version",
          "description": "The current version that the push endpoint is at."
        }
      ]
    },
    {
      "name": "PushManager.unregister()",
      "link": "/en-US/docs/Web/API/PushManager/unregister",
      "description": "Unregisters and deletes a specified subscription endpoint. In the updated API, a subscription is unregistered by calling the PushSubscription.unsubscribe() method.",
      "parameters": [
        {
          "name": "pushEndpoint",
          "description": "A pushEndpoint to be unregistered."
        },
        {
          "name": "pushEndpoint",
          "description": "A string representing the URL of the unregistered endpoint."
        },
        {
          "name": "version",
          "description": "Undefined when unregister.onsuccess is called."
        }
      ]
    }
  ]
}