{
  "name": "WindowTimers",
  "description": "Important: As of Firefox 52, the methods defined in this mixin have been moved to the WindowOrWorkerGlobalScope mixin, and other browsers will follow suit. Look to that page for up-to-date details. WindowTimers is a mixin used to provide utility methods which set and clear timers. No objects of this type exist; instead, its methods are available on Window for the standard browsing scope, or on WorkerGlobalScope for workers.",
  "members": [
    {
      "name": "WindowTimers.clearInterval()",
      "link": "/en-US/docs/Web/API/WindowTimers/clearInterval",
      "description": "Cancels the repeated execution set using WindowTimers.setInterval().",
      "parameters": [
        {
          "name": "intervalID",
          "description": "The identifier of the repeated action you want to cancel. This ID was returned by the corresponding call to setInterval()."
        }
      ]
    },
    {
      "name": "WindowTimers.clearTimeout()",
      "link": "/en-US/docs/Web/API/WindowTimers/clearTimeout",
      "description": "Cancels the delayed execution set using WindowTimers.setTimeout().",
      "parameters": [
        {
          "name": "timeoutID",
          "description": "The identifier of the timeout you want to cancel. This ID was returned by the corresponding call to setTimeout()."
        }
      ]
    },
    {
      "name": "WindowTimers.setInterval()",
      "link": "/en-US/docs/Web/API/WindowTimers/setInterval",
      "description": "Schedules a function to execute every time a given number of milliseconds elapses.",
      "parameters": [
        {
          "name": "func",
          "description": "A function to be executed every delay milliseconds. The function is not passed any parameters, and no return value is expected."
        },
        {
          "name": "code",
          "description": "An optional syntax allows you to include a string instead of a function, which is compiled and executed every delay milliseconds. This syntax is not recommended for the same reasons that make using eval() a security risk."
        },
        {
          "name": "delay",
          "description": "The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. If this parameter is less than 10, a value of 10 is used. Note that the actual delay may be longer; see \"Reasons for delays longer than specified\" in WindowOrWorkerGlobalScope.setTimeout() for examples."
        },
        {
          "name": "param1, ..., paramN Optional",
          "description": "Additional parameters which are passed through to the function specified by func once the timer expires."
        },
        {
          "name": "thisObject",
          "description": "The this object on which the callback function is called. It can be an object or null."
        },
        {
          "name": "callback",
          "description": "The function that is repeatedly invoked . It is called with three parameters: index (the iterative index of each invocation), length (the number of total invocations assigned to the daemon - finite or Infinity) and backwards (a boolean expressing whether the index is increasing or decreasing). It is something like callback.call(thisObject, index, length, backwards). If the callback function returns a false value the daemon is paused."
        },
        {
          "name": "rate (optional)",
          "description": "The time lapse (in number of milliseconds) between each invocation. The default value is 100."
        },
        {
          "name": "length (optional)",
          "description": "The total number of invocations. It can be a positive integer or Infinity. The default value is Infinity."
        },
        {
          "name": "myDaemon.owner",
          "description": "The this object on which is executed the daemon (read/write). It can be an object or null."
        },
        {
          "name": "myDaemon.task",
          "description": "The function that is repeatedly invoked (read/write). It is called with three arguments: index (the iterative index of each invocation), length (the number of total invocations assigned to the daemon - finite or Infinity) and backwards (a boolean expressing whether the index is decreasing or not) – see above. If the myDaemon.task function returns a false value the daemon is paused."
        },
        {
          "name": "myDaemon.rate",
          "description": "The time lapse (in number of milliseconds) between each invocation (read/write)."
        },
        {
          "name": "myDaemon.length",
          "description": "The total number of invocations. It can be a positive integer or Infinity (read/write)."
        },
        {
          "name": "myDaemon.isAtEnd()",
          "description": "Returns a boolean expressing whether the daemon is at the start/end position or not."
        },
        {
          "name": "myDaemon.synchronize()",
          "description": "Synchronize the timer of a started daemon with the time of its invocation."
        },
        {
          "name": "myDaemon.pause()",
          "description": "Pauses the daemon."
        },
        {
          "name": "myDaemon.start([reverse])",
          "description": "Starts the daemon forward (index of each invocation increasing) or backwards (index decreasing)."
        },
        {
          "name": "MiniDaemon.forceCall(minidaemon)",
          "description": "Forces a single callback to the minidaemon.task function regardless of the fact that the end has been reached or not. In any case the internal INDEX property is increased/decreased (depending on the actual direction of the process)."
        }
      ]
    },
    {
      "name": "WindowTimers.setTimeout()",
      "link": "/en-US/docs/Web/API/WindowTimers/setTimeout",
      "description": "Schedules a function to execute in a given amount of time.",
      "parameters": [
        {
          "name": "function",
          "description": "A function to be executed after the timer expires."
        },
        {
          "name": "code",
          "description": "An alternative syntax that allows you to include a string instead of a function, which is compiled and executed when the timer expires. This syntax is not recommended for the same reasons that make using eval() a security risk."
        },
        {
          "name": "delay Optional",
          "description": "The time, in milliseconds (thousandths of a second), the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute \"immediately\", or more accurately, as soon as possible. Note that in either case, the actual delay may be longer than intended; see Reasons for delays longer than specified below."
        },
        {
          "name": "param1, ..., paramN Optional",
          "description": "Additional parameters which are passed through to the function specified by function or code once the timer expires."
        }
      ]
    }
  ]
}