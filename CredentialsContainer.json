{
  "name": "CredentialsContainer",
  "description": "",
  "members": [
    {
      "name": "CredentialsContainer.get()",
      "link": "/en-US/docs/Web/API/CredentialsContainer/get",
      "description": "Returns a Promise to a Credential instance that matches the provided parameters.",
      "parameters": [
        {
          "name": "options Optional",
          "description": "An object that sets options to look for among the credentials in the CredentialsContainer. The available options are: password: a Boolean indicating that returned Credential instances should include user (as opposed to federated) credentials.  federated: An object containing requirements for returned federated credentials. The available options are: providers: An array of DOMString instances of identity providers to search for. protocols n array of DOMString instances of federation protocols to search for. unmediated: a Boolean indicating the returned Credential instance should not require user mediation."
        }
      ]
    },
    {
      "name": "CredentialsContainer.requireUserMediation()",
      "link": "/en-US/docs/Web/API/CredentialsContainer/requireUserMediation",
      "description": "Returns an empty Promise after acquiring user mediation for credentials returned from a particular origin. For example, you might call this, after a user signs out of a website to ensure that he/she isn\u0027t automatically signed in on the next site visit."
    },
    {
      "name": "CredentialsContainer.store()",
      "link": "/en-US/docs/Web/API/CredentialsContainer/store",
      "description": "Stores a set of credentials for a user, inside a provided Credential instance and returns that instance in a Promise.",
      "parameters": [
        {
          "name": "Credentials",
          "description": "A valid Credential instance."
        }
      ]
    }
  ]
}